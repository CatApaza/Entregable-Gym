<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat con Administrador | GymApp</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/css/notifications.css">
    <style>
        :root {
            --primary-color: #0d6efd;
            --secondary-color: #6c757d;
            --success-color: #198754;
            --info-color: #0dcaf0;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --light-color: #f8f9fa;
            --dark-color: #212529;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
        }

        .main-container {
            padding: 20px;
        }

        .chat-container {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            overflow: hidden;
            height: 80vh;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            background: linear-gradient(to right, #0d6efd, #0a58ca);
            color: white;
            padding: 15px 20px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-messages {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
            background-color: #f9f9f9;
        }

        .message {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 15px;
            position: relative;
            word-wrap: break-word;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .message-sent {
            align-self: flex-end;
            background-color: #dcf8c6;
            border-bottom-right-radius: 5px;
        }

        .message-received {
            align-self: flex-start;
            background-color: white;
            border-bottom-left-radius: 5px;
        }

        .message-info {
            font-size: 0.75rem;
            color: #666;
            margin-top: 5px;
            display: flex;
            justify-content: space-between;
        }

        .chat-input {
            padding: 15px;
            border-top: 1px solid #e0e0e0;
            display: flex;
            gap: 10px;
            background-color: white;
        }

        .chat-input input {
            flex-grow: 1;
            border-radius: 20px;
            border: 1px solid #ddd;
            padding: 10px 15px;
        }

        .chat-input button {
            border-radius: 20px;
            padding: 0 20px;
        }

        .btn-back {
            margin-bottom: 20px;
        }

        .typing-indicator {
            font-size: 0.8rem;
            color: #666;
            font-style: italic;
            margin-bottom: 10px;
            display: none;
        }
        
        .admin-badge {
            background-color: var(--primary-color);
            color: white;
            border-radius: 20px;
            font-size: 0.7rem;
            padding: 3px 8px;
            margin-left: 8px;
        }
    </style>
</head>
<body>
    <div class="container main-container">
        <div class="row">
            <div class="col-12">
                <a href="/frontend/entrenadores/<%= usuario._id %>" class="btn btn-secondary btn-back">
                    <i class="fas fa-arrow-left"></i> Volver al dashboard
                </a>
                
                <div class="chat-container">
                    <div class="chat-header">
                        <span>
                            <i class="fas fa-headset me-2"></i>
                            Chat con Administrador
                            <span class="admin-badge">Soporte</span>
                        </span>
                    </div>
                    
                    <div class="chat-messages" id="chatMessages">
                        <% if (mensajes && mensajes.length === 0) { %>
                            <div class="message message-received">
                                <div class="message-content">
                                    Bienvenido al chat con el administrador. Aquí puedes consultar cualquier duda sobre el sistema o solicitar asistencia.
                                </div>
                                <div class="message-info">
                                    <span>Administrador</span>
                                    <span><%= new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %></span>
                                </div>
                            </div>
                        <% } else if (mensajes && mensajes.length > 0) { %>
                            <% mensajes.forEach(function(mensaje) { %>
                                <div class="message <%= mensaje.senderId === usuario._id ? 'message-sent' : 'message-received' %>">
                                    <div class="message-content">
                                        <%= mensaje.message %>
                                    </div>
                                    <div class="message-info">
                                        <span><%= mensaje.senderId === usuario._id ? 'Tú' : 'Administrador' %></span>
                                        <span><%= new Date(mensaje.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %></span>
                                    </div>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                    
                    <div class="typing-indicator" id="typingIndicator"></div>
                    
                    <div class="chat-input">
                        <input type="text" id="messageInput" placeholder="Escribe tu mensaje...">
                        <button class="btn btn-primary" id="sendButton">
                            <i class="fas fa-paper-plane"></i> Enviar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Datos del usuario
            const userId = '<%= usuario._id %>';
            const userType = 'entrenador';
            const username = '<%= usuario.nombre %> <%= usuario.apellido %>';
            
            // Datos del administrador (receptor)
            let adminId = '<%= typeof adminId !== "undefined" ? adminId : "null" %>';
            if (adminId === 'null') {
                adminId = null;
                console.log('No se recibió adminId del servidor, se obtendrá dinámicamente');
            } else {
                console.log('adminId recibido del servidor:', adminId);
            }

            // Elementos del DOM
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const typingIndicator = document.getElementById('typingIndicator');
            
            // Conectar con Socket.io
            const socket = io();
            
            // Función para agregar un mensaje al chat
            function addMessage(message, isSent) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${isSent ? 'message-sent' : 'message-received'}`;
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'message-content';
                contentDiv.textContent = message.message;
                
                const infoDiv = document.createElement('div');
                infoDiv.className = 'message-info';
                
                const senderSpan = document.createElement('span');
                senderSpan.textContent = isSent ? 'Tú' : 'Administrador';
                
                const timeSpan = document.createElement('span');
                const messageTime = new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                timeSpan.textContent = messageTime;
                
                infoDiv.appendChild(senderSpan);
                infoDiv.appendChild(timeSpan);
                
                messageDiv.appendChild(contentDiv);
                messageDiv.appendChild(infoDiv);
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Evento para enviar mensaje
            function sendMessage() {
                const messageText = messageInput.value.trim();
                if (!messageText || !adminId) return;
                
                const message = {
                    senderId: userId,
                    senderName: username,
                    senderType: userType,
                    receiverId: adminId,
                    receiverType: 'administrador',
                    message: messageText,
                    timestamp: new Date()
                };
                
                // Emitir mensaje al servidor
                socket.emit('admin-trainer-message', message);
                
                // Agregar mensaje al chat
                addMessage(message, true);
                
                // Limpiar input
                messageInput.value = '';
                messageInput.focus();
            }
            
            // Evento click del botón enviar
            sendButton.addEventListener('click', sendMessage);
            
            // Evento al presionar Enter en el input
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // Evento al escribir en el input (indicador de escritura)
            messageInput.addEventListener('input', function() {
                socket.emit('trainer-writing', {
                    trainerId: userId,
                    trainerName: username
                });
            });
            
            // Conectarse al servidor Socket.io
            socket.on('connect', function() {
                console.log('Conectado al servidor Socket.io');
                
                // Registrar al entrenador en el sistema de chat admin-entrenador
                socket.emit('register-trainer', {
                    trainerId: userId,
                    trainerName: username
                });
                
                // Usar el adminId proporcionado por el servidor
                if (typeof adminId !== 'undefined' && adminId) {
                    console.log('Usando adminId proporcionado por el servidor:', adminId);
                } else {
                    // Solicitar al servidor obtener el ID del administrador
                    console.log('Solicitando adminId al servidor...');
                    socket.emit('get-admin-id');
                }
            });
            
            // Recibir ID del administrador
            socket.on('admin-id', function(data) {
                adminId = data.adminId;
                console.log('ID del administrador:', adminId);
                
                // Solicitar historial de conversación
                socket.emit('get-admin-trainer-conversation', {
                    trainerId: userId,
                    adminId: adminId
                });
            });
            
            // Recibir mensajes del administrador
            socket.on(`admin-trainer-chat-${userId}`, function(message) {
                if (message.senderId !== userId) {
                    addMessage(message, false);
                    
                    // Marcar mensaje como leído
                    socket.emit('mark-admin-message-read', {
                        trainerId: userId,
                        adminId: message.senderId,
                        messageId: message._id
                    });
                }
            });
            
            // Escuchar indicador de escritura del administrador
            socket.on('admin-writing', function(data) {
                typingIndicator.textContent = `Administrador está escribiendo...`;
                typingIndicator.style.display = 'block';
                
                // Ocultar después de 3 segundos
                setTimeout(() => {
                    typingIndicator.style.display = 'none';
                }, 3000);
            });
            
            // Hacer scroll al final del chat al cargar
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });
    </script>
</body>
</html>
